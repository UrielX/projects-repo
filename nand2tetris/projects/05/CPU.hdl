// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Assemble the A-register
    Not(in=instruction[15], out=ni);
    Mux16(a=ALUout, b=instruction, sel=ni, out=Ain);
    Or(a=ni, b=instruction[5], out=Aload);
    ARegister(in=Ain, load=Aload, out=A, out[0..14]=addressM);

    // Assemble the D-register
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=D);

    // A or M register MUX16
    Mux16(a=A, b=inM, sel=instruction[12], out=AM);

    // Connect the ALU ins[11 10 9 8 7 6]
    // Instructions = 111a c1c2c3c4 c5c6d1d2 d3j1j2j3
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    // Connect the zero and negative outputs of the ALU
    // so it can be connected to the PC chip and CPU can execute conditional jump instructions
    // Instructions[2, 1, 0] = j3, j2 and j1 instructions 
    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);
    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=pos, b=nzr, out=posnum);
    And(a=jgt, b=posnum, out=x1);

    And(a=instruction[15], b=instruction[1], out=jeq);
    And(a=jeq, b=zr, out=x2);

    And(a=instruction[15], b=instruction[2], out=jlt);
    And(a=jlt, b=ng, out=x3);

    Or(a=x1, b=x2, out=xt);
    Or(a=x3, b=xt, out=pcLoad);

    // Assemble the writeM output
    // Instruction[3] = d3
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Connect the Program Counter chip
    PC(in=A, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}